"""
#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    May 19, 2023 04:39:12 PM EDT  platform: Windows NT
"""
import sys
import tkinter as tk
system_packages = set(sys.modules.keys())

#import .pdrobot as pdrobot
import src.Page_GUI.pdrobot as pdrobot
from src.gdfile_dialog import FileDialog
from src.gcode_maker import GCodeMaker
from src.interpreter.interpreter import Interpreter
from src.interpreter.parser import Parser
from pathlib import Path
from src.robot_serial_port import serial_port_manager

_debug = False  # False to eliminate debug printing from callback functions.

# GLOBALS
gm = GCodeMaker()
win = None
print (f'!!!!!!!!!!!win={id(win)} {win}')


def main(toplevel: object = None):
    """Main entry point for the application.
    toplevel is None unless this is called by test routine
    """
    print(set(sys.modules.keys()) - system_packages)
    global win
    print (f'!!!!!!!!!!!win={id(win)} {win}')
    if toplevel is None:
        try:
            root = tk.Tk()
            root.protocol('WM_DELETE_WINDOW', root.destroy)
            win = pdrobot.Toplevel1(root)
            print (f'&&&&&&&&&&win={id(win)}  {win}')

            # Creates a toplevel widget.

            root.mainloop()

        finally:
            gm.serialport.close()
    else:
        # toplevel provided by test
        win = toplevel
        gm.serialport.close()


def cb_buttonHome(*args):
    # For now go_home homes both axis
    # if args[0] == 'LIN':
    #     win.absolutePos.set(0)
    # if args[0] == 'ROT':
    #     win.absoluteRot.set(0)
    win.absolutePos.set(0)
    win.absoluteRot.set(0)
    gm.go_home()


def cb_buttonLin(*args):
    global win
    val = win.absolutePos.get()
    speed = win.speedLin.get()
    val = 0 if val == "" else float(val)
    val += args[0]
    win.absolutePos.set(str(f'{val:3.2f}'))
    gm.move_lin(val, speed=speed)


def cb_buttonRot(*args):
    global win
    val = win.absoluteRot.get()
    speed = win.speedRot.get()
    val = 0 if val == "" else int(val)
    val += args[0]
    win.absoluteRot.set(str(val))
    gm.move_rot(val, speed=speed)


def cb_scaleLinSpeed(*args):
    global win
    speed = float(args[0])
    print(f'lin speed {speed} {args}')
    win.speedLin.set(speed)


def cb_scaleRotSpeed(*args):
    global win
    speed = float(args[0])
    print(f'rot speed {speed} {args}')
    win.speedRot.set(speed)


def cb_stop(*args):
     gm.stop()


def cb_go(*args):
    global win
 
    try:
        val = args[1].get()
        win.absolutePos.set(val)
        gm.move_lin(int(val), win.speedLin.get())
        val = args[2].get()
        win.absoluteRot.set(val)
        gm.move_rot(int(val), win.speedRot.get())
    except ValueError:
        pass


def cb_waypoint(*args):
    global win
    pos = win.absolutePos.get()
    rot = win.absoluteRot.get()
    if args[0] == 1 and not win.set1_locked.get():
        win.set1_pos.set(pos)
        win.set1_rot.set(rot)
    elif args[0] == 2:
        win.set2_pos.set(pos)
        win.set2_rot.set(rot)
    elif args[0] == 3:
        win.set3_pos.set(pos)
        win.set3_rot.set(rot)
    elif args[0] == 4:
        win.set4_pos.set(pos)
        win.set4_rot.set(rot)

def cb_serial_port_reset(*args):
    global win
    try:
        win.EntrySp.configure(foreground="black")
        win.EntrySp.configure(background="green")
        if gm.serialport is not None:
            gm.serialport.close()
        gm.serialport = serial_port_manager(win.serial_prt.get())
        win.serial_prt.set(gm.serialport.name)
    except Exception:
        win.EntrySp.configure(foreground="#ff0000")
        win.EntrySp.configure(background="white")


def cb_cancel_file(*args):
    global win
    win.filename.set("")


def cb_getSourceFile(*args):
    global win
    _listbox = args[0]
    _pd_file = FileDialog()  # Opens a file dialog picker
    _source_filepath = Path(_pd_file.get_file_dialog())
    if _source_filepath.suffix == '.gcode':
        target_file = str(_source_filepath)
    else:
        win.gcode_file = str(_source_filepath.with_suffix('.gcode'))
        win.dg_filename.set(str(_source_filepath.name))  # Put file name in file widgit
        _source = _source_filepath.read_text(encoding='utf-8')  # reads entire file
        parser = Parser(_source)
        interp = Interpreter(parser, outfile=win.gcode_file)
        interp.interpret()
        if not interp.gcode.outfile.closed:
            interp.gcode.outfile.close()
        target_file = interp.gcode.gcode_path
    with open(target_file, 'r') as fp:
        text = fp.readlines()
        results = list(enumerate(text))
    for index, item in results:
        _listbox.insert(index, item)
    _listbox.selection_set(0)
    win.ButtonRunProg.configure(state='active')
    win.ButtonStepProg.configure(state='active')


def cb_run_program(*args):
    listbox = args[0]
    gcode = listbox.get(0)
    gm.send(gcode)
    root.after(300, lambda: runnext(listbox))

def cb_step_program(*args):
    try:
        _listbox = args[0]
        index = _listbox.curselection()[0]
        _listbox.selection_clear(index)
        gcode = _listbox.get(index)
        gm.send(gcode)
        index += 1
        _listbox.selection_set(index)
        _listbox.see(index)
        return 1
    except IndexError:
        _listbox.selection_set(0)
        return 0

def runnext(_listbox: object):
    if cb_step_program(_listbox):
        root.after(300, lambda: runnext(_listbox))


def cb_exit_program(*args):
    root.destroy()


if __name__ == '__main__':
    pdrobot.start_up()
